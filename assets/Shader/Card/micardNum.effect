// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

// Note: Current format version is experiment, the format may be changed.
// The future format may not be compatible, you may need to update the script manually.

// 注意：当前版本的格式是实验性的，之后还会进行修改。
// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，
%{
  techniques: [
    {
      passes: [
        {
          vert: vs
          frag: fs
          cullMode: none
          blend: true
        }
      ]
      layer: 0
    }
  ]
  properties: {
    texture: {
      type: sampler2D
      value: null
    },
    sprWidth: {
      type: number
      displayName:'图片的宽'
      value: 100
    },
    sprHight: {
      type: number
      displayName:'图片的高'
      value: 100
    },
    worldSprWidth: {
      type: number
      displayName:'世界图片的宽'
      value: 100
    },
    worldSprHeight: {
      type: number
      displayName:'世界图片的高'
      value: 100
    },
    xlist:{
      type:vec3
      displayName:'3个点的x坐标'
      value:[0,0,0]
    },
    ylist:{
      type:vec3
      displayName:'3个点的y坐标'
      value:[0,0,0]
    },
    disX:{
      type:vec2
      displayName:'2个点的x坐标'
      value:[0,0]
    },
    disY:{
      type:vec2
      displayName:'2个点的y坐标'
      value:[0,0]
    },
    worldPos:{
      type:vec2
      displayName:'图片的世界坐标'
      value:[0,0]
    },
    xlistSymmetricPos:{
      type:vec3
      displayName:'对称点3个点的x坐标'
      value:[0,0,0]
    },
    ylistSymmetricPos:{
      type:vec3
      displayName:'对称点3个点的y坐标'
      value:[0,0,0]
    },
    disXSymmetricPos:{
      type:vec2
      displayName:'对称点2个点的x坐标'
      value:[0,0]
    },
    disYSymmetricPos:{
      type:vec2
      displayName:'对称点2个点的y坐标'
      value:[0,0]
    }
  }
%}

%% vs {

precision highp float;

uniform mat4 cc_matViewProj;
attribute vec3 a_position;
attribute lowp vec4 a_color;
attribute mediump vec2 a_uv0;
varying mediump vec2 v_uv0;

varying lowp vec4 v_color;

uniform float sprWidth;
uniform float sprHight;
uniform highp vec3 xlist;
uniform highp vec3 ylist;
uniform highp vec2 disX;
uniform highp vec2 disY;

uniform float worldSprWidth;
uniform float worldSprHeight;
uniform highp vec3 xlistSymmetricPos;
uniform highp vec3 ylistSymmetricPos;
uniform highp vec2 disYSymmetricPos;
uniform highp vec2 disXSymmetricPos;

uniform highp vec2 worldPos;

varying highp float v_sprWidth;
varying highp float v_sprHight;
varying highp vec3 v_xlist;
varying highp vec3 v_ylist;
varying highp vec2 v_disX;
varying highp vec2 v_disY;

vec2 getSymmetricPos(vec2 sp,vec2 pos1, vec2 pos2)
{
    float disX = pos2.x - pos1.x;
    float disY = pos2.y - pos1.y;
    if (disX == 0.0)
    {
        float x = pos1.x - sp.x;
        return vec2(pos1.x + x,sp.y);
    }
    //获取截线斜率
    float k1 = disY/disX;

    //设对称点坐标
    // var x = 0;
    // var y = 0;
    //直线方程式
    //y = k(x-x1) + y1
    //方程式
    //(y - sp.y)/(x - sp.x) = -1/k1; 方程式(1)
    //(y+sp.y)/2 = k1*((x + sp.x)/2 - pos1.x) + pos1.y;方程式(2)

    //由方程式(1)得
    //x = (y - sp.y)/(-1/k1)+sp.x
    //x = sp.y*k1 - y*k1 + sp.x
    //由方程式(2)得
    //y = k1*x + k1*sp.x - k1*pos1.x*2 + pos1.y*2 - sp.y;
    //方程式(1)带入(2)得
    //y = k1*( sp.y*k1 - y*k1 + sp.x ) + k1*sp.x - k1*pos1.x*2 + pos1.y*2 - sp.y;
    //y = sp.y*k1*k1 - y*k1*k1 + sp.x*k1 + k1*sp.x - k1*pos1.x*2 + pos1.y*2 - sp.y;

    float y = (sp.y*k1*k1  + sp.x*k1 + k1*sp.x - k1*pos1.x*2.0 + pos1.y*2.0 - sp.y)/(1.0+k1*k1);
    float x = (y - sp.y)/(-1.0/k1)+sp.x;

    return vec2(x,y);
}

void main () {

  v_sprWidth = sprWidth;
  v_sprHight = sprHight;
  v_xlist = xlist;
  v_ylist = ylist;
  v_disX = disX;
  v_disY = disY;

  vec2 pos1 = vec2(0.0,0.0);
  vec2 pos2 = vec2(0.0,0.0);

  if (disXSymmetricPos[0] != 0.0 || disXSymmetricPos[1] != 0.0)
  {
      if (disXSymmetricPos[0] == 0.0)
      {
          pos1 = vec2(disXSymmetricPos[1] + worldPos.x,worldPos.y);
          pos2 = vec2(disXSymmetricPos[1] + worldPos.x,worldPos.y+worldSprHeight);
      }
      else
      {
          pos1 = vec2(disXSymmetricPos[0] + worldPos.x,worldPos.y);
          pos2 = vec2(disXSymmetricPos[0] + worldPos.x,worldPos.y+worldSprHeight);
      }
  }
  else if (disYSymmetricPos[0] != 0.0 || disYSymmetricPos[1] != 0.0)
  {
      if (disYSymmetricPos[0] == 0.0)
      {
          pos1 = vec2(worldPos.x,(worldSprHeight - disYSymmetricPos[1]) + worldPos.y);
          pos2 = vec2(worldPos.x + worldSprWidth, (worldSprHeight - disYSymmetricPos[1]) + worldPos.y);
      }
      else
      {
          pos1 = vec2(worldPos.x, (worldSprHeight - disYSymmetricPos[0]) + worldPos.y);
          pos2 = vec2(worldPos.x + worldSprWidth, (worldSprHeight - disYSymmetricPos[0]) + worldPos.y);
      }
  }
  else if(xlistSymmetricPos.x != 0.0 || xlistSymmetricPos.y != 0.0 || xlistSymmetricPos.z != 0.0){
      pos1 = vec2(xlistSymmetricPos.y+worldPos.x,worldSprHeight - ylistSymmetricPos.y + worldPos.y);
      pos2 = vec2(xlistSymmetricPos.z+worldPos.x,worldSprHeight - ylistSymmetricPos.z + worldPos.y);
  }

  vec2 sp = vec2(a_position.x, a_position.y);
  vec2 symmetricPos = getSymmetricPos(sp,pos1,pos2);
  vec4 tmp_pos = vec4(a_position.x, a_position.y,a_position.z, 1.0);
  tmp_pos.x = symmetricPos.x ;
  tmp_pos.y = symmetricPos.y ;

  mat4 mvp = cc_matViewProj;
  v_uv0 = a_uv0;
  v_color = a_color;

  gl_Position = mvp * tmp_pos ;
}

}

%% fs {

precision highp float;

uniform sampler2D texture;
varying mediump vec2 v_uv0;

#include <alpha-test>

varying lowp vec4 v_color;

uniform float sprWidth;
uniform float sprHight;
uniform highp vec3 xlist;
uniform highp vec3 ylist;
uniform highp vec2 disX;
uniform highp vec2 disY;

bool isHide(float px , float py)
{   
    bool b = false;
    float dx = px*sprWidth;
    float dy = py*sprHight;
    if (disX[0] != 0.0 || disX[1] != 0.0)
    {
        if (dx >= disX[0] && dx <= disX[1]){
            return true;
        }
    }
    else if (disY[0] != 0.0 || disY[1] != 0.0)
    {
        if (dy >= disY[0] && dy <= disY[1]){
            return true;
        }
    }
    
    if ( ((ylist[0]>=dy) != (ylist[2]>=dy)) && (dx < (xlist[2]-xlist[0]) * (dy-ylist[0]) / (ylist[2]-ylist[0]) + xlist[0]) )
    {
       b = !b;
    }
    if ( ((ylist[1]>=dy) != (ylist[0]>=dy)) && (dx < (xlist[0]-xlist[1]) * (dy-ylist[1]) / (ylist[0]-ylist[1]) + xlist[1]) )
    {
       b = !b;
    }
    if ( ((ylist[2]>=dy) != (ylist[1]>=dy)) && (dx < (xlist[1]-xlist[2]) * (dy-ylist[2]) / (ylist[1]-ylist[2]) + xlist[2]) )
    {
       b = !b;
    }

    return b;
}

void main () {
  vec4 color = texture2D(texture, v_uv0);

  bool hide = isHide(v_uv0.x,v_uv0.y);
  if (!hide)
  {
      color.a = 0.0;
  }

  gl_FragColor = v_color*color;
}

}
