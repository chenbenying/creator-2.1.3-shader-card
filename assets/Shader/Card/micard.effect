// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

// Note: Current format version is experiment, the format may be changed.
// The future format may not be compatible, you may need to update the script manually.

// 注意：当前版本的格式是实验性的，之后还会进行修改。
// 后续版本的格式不保证兼容当前格式，可能需要手动升级到最新版本。，
%{
  techniques: [
    {
      passes: [
        {
          vert: vs
          frag: fs
          cullMode: none
          blend: true
        }
      ]
      layer: 0
    }
  ]
  properties: {
    texture: {
      type: sampler2D
      value: null
    },
    sprWidth: {
      type: number
      displayName:'图片的宽'
      value: 100
    },
    sprHight: {
      type: number
      displayName:'图片的高'
      value: 100
    },
    xlist:{
      type:vec3
      displayName:'3个点的x坐标'
      value:[0,0,0]
    },
    ylist:{
      type:vec3
      displayName:'3个点的y坐标'
      value:[0,0,0]
    },
    disX:{
      type:vec2
      displayName:'2个点的x坐标'
      value:[0,0]
    },
    disY:{
      type:vec2
      displayName:'2个点的y坐标'
      value:[0,0]
    },
  }
%}

%% vs {

precision highp float;

uniform mat4 cc_matViewProj;
attribute vec3 a_position;
attribute lowp vec4 a_color;
attribute mediump vec2 a_uv0;
varying mediump vec2 v_uv0;
varying lowp vec4 v_color;

uniform float sprWidth;
uniform float sprHight;
uniform highp vec3 xlist;
uniform highp vec3 ylist;
uniform highp vec2 disX;
uniform highp vec2 disY;

varying highp float v_sprWidth;
varying highp float v_sprHight;
varying highp vec3 v_xlist;
varying highp vec3 v_ylist;
varying highp vec2 v_disX;
varying highp vec2 v_disY;

void main () {

  v_sprWidth = sprWidth;
  v_sprHight = sprHight;
  v_xlist = xlist;
  v_ylist = ylist;
  v_disX = disX;
  v_disY = disY;

  mat4 mvp = cc_matViewProj;
  v_uv0 = a_uv0;
  v_color = a_color;
  gl_Position = mvp * vec4(a_position,1) ;
}

}

%% fs {

precision highp float;

uniform sampler2D texture;
varying mediump vec2 v_uv0;


#include <alpha-test>

varying lowp vec4 v_color;

varying highp float v_sprWidth;
varying highp float v_sprHight;
varying highp vec3 v_xlist;
varying highp vec3 v_ylist;
varying highp vec2 v_disX;
varying highp vec2 v_disY;

bool isHide(float px , float py)
{   

    bool b = false;
    float dx = px*v_sprWidth;
    float dy = py*v_sprHight;
    if (v_disX[0] != 0.0 || v_disX[1] != 0.0)
    {
        if (dx >= v_disX[0] && dx <= v_disX[1]){
            return true;
        }
    }
    else if (v_disY[0] != 0.0 || v_disY[1] != 0.0)
    {
        if (dy >= v_disY[0] && dy <= v_disY[1]){
            return true;
        }
    }
    
    if ( ((v_ylist[0]>=dy) != (v_ylist[2]>=dy)) && (dx < (v_xlist[2]-v_xlist[0]) * (dy-v_ylist[0]) / (v_ylist[2]-v_ylist[0]) + v_xlist[0]) )
    {
       b = !b;
    }
    if ( ((v_ylist[1]>=dy) != (v_ylist[0]>=dy)) && (dx < (v_xlist[0]-v_xlist[1]) * (dy-v_ylist[1]) / (v_ylist[0]-v_ylist[1]) + v_xlist[1]) )
    {
       b = !b;
    }
    if ( ((v_ylist[2]>=dy) != (v_ylist[1]>=dy)) && (dx < (v_xlist[1]-v_xlist[2]) * (dy-v_ylist[2]) / (v_ylist[1]-v_ylist[2]) + v_xlist[2]) )
    {
       b = !b;
    }

    return b;
}

void main () {
  vec4 color = texture2D(texture, v_uv0);
  bool hide = isHide(v_uv0.x,v_uv0.y);
  if (hide)
  {
    color.a = 0.0;
  }
  gl_FragColor = color;
}

}
