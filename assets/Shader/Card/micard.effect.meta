{
  "ver": "1.0.15",
  "uuid": "2c11d650-b832-483c-b0a5-def20c6fc9b6",
  "compiledShaders": [
    {
      "vert": "\n#define _IS_VERT_SHADER 1\n\nprecision highp float;\n\nuniform mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute lowp vec4 a_color;\nattribute mediump vec2 a_uv0;\nvarying mediump vec2 v_uv0;\nvarying lowp vec4 v_color;\n\nuniform float sprWidth;\nuniform float sprHight;\nuniform highp vec3 xlist;\nuniform highp vec3 ylist;\nuniform highp vec2 disX;\nuniform highp vec2 disY;\n\nvarying highp float v_sprWidth;\nvarying highp float v_sprHight;\nvarying highp vec3 v_xlist;\nvarying highp vec3 v_ylist;\nvarying highp vec2 v_disX;\nvarying highp vec2 v_disY;\n\nvoid main () {\n\n  v_sprWidth = sprWidth;\n  v_sprHight = sprHight;\n  v_xlist = xlist;\n  v_ylist = ylist;\n  v_disX = disX;\n  v_disY = disY;\n\n  mat4 mvp = cc_matViewProj;\n  v_uv0 = a_uv0;\n  v_color = a_color;\n  gl_Position = mvp * vec4(a_position,1) ;\n}\n\n\n",
      "frag": "\n#define _IS_FRAG_SHADER 1\n\nprecision highp float;\n\nuniform sampler2D texture;\nvarying mediump vec2 v_uv0;\n\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\n\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\n\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n\nvarying lowp vec4 v_color;\n\nvarying highp float v_sprWidth;\nvarying highp float v_sprHight;\nvarying highp vec3 v_xlist;\nvarying highp vec3 v_ylist;\nvarying highp vec2 v_disX;\nvarying highp vec2 v_disY;\n\nbool isHide(float px , float py)\n{   \n\n    bool b = false;\n    float dx = px*v_sprWidth;\n    float dy = py*v_sprHight;\n    if (v_disX[0] != 0.0 || v_disX[1] != 0.0)\n    {\n        if (dx >= v_disX[0] && dx <= v_disX[1]){\n            return true;\n        }\n    }\n    else if (v_disY[0] != 0.0 || v_disY[1] != 0.0)\n    {\n        if (dy >= v_disY[0] && dy <= v_disY[1]){\n            return true;\n        }\n    }\n    \n    if ( ((v_ylist[0]>=dy) != (v_ylist[2]>=dy)) && (dx < (v_xlist[2]-v_xlist[0]) * (dy-v_ylist[0]) / (v_ylist[2]-v_ylist[0]) + v_xlist[0]) )\n    {\n       b = !b;\n    }\n    if ( ((v_ylist[1]>=dy) != (v_ylist[0]>=dy)) && (dx < (v_xlist[0]-v_xlist[1]) * (dy-v_ylist[1]) / (v_ylist[0]-v_ylist[1]) + v_xlist[1]) )\n    {\n       b = !b;\n    }\n    if ( ((v_ylist[2]>=dy) != (v_ylist[1]>=dy)) && (dx < (v_xlist[1]-v_xlist[2]) * (dy-v_ylist[2]) / (v_ylist[1]-v_ylist[2]) + v_xlist[2]) )\n    {\n       b = !b;\n    }\n\n    return b;\n}\n\nvoid main () {\n  vec4 color = texture2D(texture, v_uv0);\n  bool hide = isHide(v_uv0.x,v_uv0.y);\n  if (hide)\n  {\n    color.a = 0.0;\n  }\n  gl_FragColor = color;\n}\n\n\n"
    }
  ],
  "subMetas": {}
}